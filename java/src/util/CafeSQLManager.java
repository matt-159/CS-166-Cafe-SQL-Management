package util;

import java.sql.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.List;

public final class CafeSQLManager {

    private static Connection connection = null;

    public static void init(String host, String dbname, String dbport, String user, String passwd) {
        if (connection == null) {
            try {
                Class.forName("org.postgresql.Driver").newInstance();

                String url = String.format("jdbc:postgresql://%s:%s/%s", host, dbport, dbname);
                System.out.println(url);

                connection = DriverManager.getConnection(url, user, passwd);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    public static void cleanup() {
        if (connection != null) {
            try {
                connection.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    /**
     * Method to execute an input query SQL instruction (i.e. SELECT).  This
     * method issues the query to the DBMS and returns a list of the results
     *
     * @param query the input query string
     * @return a list representing the ResultSet of the query
     */
    public static List<List<String>> executeQuery(String query) {
        List<List<String>> results = null;

        try {
            Statement statement = connection.createStatement();

            results = resultsToList(statement.executeQuery(query));

            statement.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return results;
    }

    /**
     * Method to execute an update SQL statement.  Update SQL instructions
     * includes CREATE, INSERT, UPDATE, DELETE, and DROP.
     *
     * @param sql the input SQL string
     */
    public static void executeUpdate(String sql) {
        try {
            // creates a statement object
            Statement stmt = connection.createStatement();

            // issues the update instruction
            stmt.executeUpdate(sql);

            // close the instruction
            stmt.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    /**
     * Method to fetch the last value from sequence. This
     * method issues the query to the DBMS and returns the current
     * value of sequence used for autogenerated keys
     *
     * @param sequence name of the DB sequence
     * @return current value of a sequence
     * @throws java.sql.SQLException when failed to execute the query
     */
    public static int getCurrSeqVal(String sequence) throws SQLException {
        Statement stmt = connection.createStatement();

        ResultSet rs = stmt.executeQuery(String.format("Select currval('%s')", sequence));
        if (rs.next())
            return rs.getInt(1);
        return -1;
    }

    public static List<List<String>> resultsToList(ResultSet rs) throws SQLException {
        ResultSetMetaData rsmd = rs.getMetaData();

        int cols = rsmd.getColumnCount();

        List<List<String>> list = new ArrayList<>();


        List<String> row = new ArrayList<>(cols);
        for (int i = 1; i <= cols; i++) {

            row.add(rsmd.getColumnName(i));
        }
        list.add(row);

        rs.next();

        do {
            row = new ArrayList<>(cols);

            for (int i = 1; i <= cols; i++) {
                row.add(rs.getString(i));
            }
            list.add(row);
        } while (rs.next());

        return list;
    }

    public static void printResultSetList(List<List<String>> rsList) {
        printResultSetList(rsList, false);
    }

    public static void printResultSetList(List<List<String>> rsList, boolean printColumnHeaders) {
        if (!printColumnHeaders) {
            rsList.remove(0);
        }

        int maxLength = rsList.stream()
                .flatMap(Collection::stream)
                .max(Comparator.comparingInt(s -> s.trim().length()))
                .orElse("").length();

        System.out.println("maxLength = " + maxLength);

        rsList.forEach(list -> {
            list.forEach(s -> {
                String format = "%-" + maxLength + "s ";
                System.out.printf(format, s.trim());
            });
            System.out.println();
        });
    }

    public static String login(String username, String password) {

        String query = String.format("SELECT * FROM USERS WHERE login = '%s' AND password = '%s'", username, password);
        System.out.println(query);

        List<List<String>> results = executeQuery(query);
        printResultSetList(results);

        return results.size() > 0 ? username : null;
    }

    public static void createUser(String phone, String login, String password, String favItems, String type) {
        String query = String.format("INSERT INTO USERS (phoneNum, login, password, favItems, type) VALUES ('%s','%s','%s','%s','%s')", phone, login, password, favItems, type);

        executeUpdate(query);
    }
}
