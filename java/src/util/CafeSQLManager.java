package util;

import java.sql.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.List;

public final class CafeSQLManager {

    private static Connection connection = null;

    public static void init(String host, String dbname, String dbport, String user, String passwd) {
        if (connection == null) {
            try {
                Class.forName("org.postgresql.Driver").newInstance();

                String url = String.format("jdbc:postgresql://%s:%s/%s", host, dbport, dbname);
                System.out.println(url);

                connection = DriverManager.getConnection(url, user, passwd);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    public static void cleanup() {
        if (connection != null) {
            try {
                connection.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    public static List<List<String>> executeQuery(String query) {
        return executeQuery(query, false);
    }

    /**
     * Method to execute an input query SQL instruction (i.e. SELECT).  This
     * method issues the query to the DBMS and returns a list of the results
     *
     * @param query the input query string
     * @param includeColumnHeaders boolean choice to include column labels in the result set
     * @return a list representing the ResultSet of the query
     */
    public static List<List<String>> executeQuery(String query, boolean includeColumnHeaders) {
        System.out.println(query);
        List<List<String>> results = null;

        try {
            Statement statement = connection.createStatement();

            results = resultsToList(statement.executeQuery(query), includeColumnHeaders);

            statement.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return results;
    }

    /**
     * Method to execute an update SQL statement.  Update SQL instructions
     * includes CREATE, INSERT, UPDATE, DELETE, and DROP.
     *
     * @param sql the input SQL string
     */
    public static boolean executeUpdate(String sql) {
        System.out.println(sql);
        boolean wasSuccess = false;

        try {
            Statement stmt = connection.createStatement();

            stmt.executeUpdate(sql);

            stmt.close();

            wasSuccess = true;
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return wasSuccess;
    }

    /**
     * Method to fetch the last value from sequence. This
     * method issues the query to the DBMS and returns the current
     * value of sequence used for autogenerated keys
     *
     * @param sequence name of the DB sequence
     * @return current value of a sequence
     * @throws java.sql.SQLException when failed to execute the query
     */
    public static int getCurrSeqVal(String sequence) throws SQLException {
        Statement stmt = connection.createStatement();

        ResultSet rs = stmt.executeQuery(String.format("Select currval('%s')", sequence));
        if (rs.next())
            return rs.getInt(1);
        return -1;
    }

    public static List<List<String>> resultsToList(ResultSet rs) {
        return resultsToList(rs, false);
    }

    public static List<List<String>> resultsToList(ResultSet rs, boolean includeColumnHeaders) {

        List<List<String>> list = null;

        try {
            ResultSetMetaData rsmd = rs.getMetaData();
            int cols = rsmd.getColumnCount();
            list = new ArrayList<>();

            while (rs.next()) {
                List<String> row = new ArrayList<>(cols);

                if (includeColumnHeaders) {
                    for (int i = 1; i <= cols; i++) {
                        row.add(rsmd.getColumnName(i).trim());
                    }
                    list.add(row);

                    row = new ArrayList<>();
                    includeColumnHeaders = false;
                }

                for (int i = 1; i <= cols; i++) {
                    row.add(rs.getString(i).trim());
                }
                list.add(row);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return list;
    }

    public static void printResultSetList(List<List<String>> rsList) {
        if (rsList == null) {
            return;
        }

        int maxLength = rsList.stream()
                .flatMap(Collection::stream)
                .max(Comparator.comparingInt(s -> s.trim().length()))
                .orElse("").length();

        System.out.println("maxLength = " + maxLength);

        rsList.forEach(list -> {
            list.forEach(s -> {
                String format = "%-" + maxLength + "s ";
                System.out.printf(format, s.trim());
            });
            System.out.println();
        });
    }

    public static boolean isEmptyResultSet(List<List<String>> rsList) {
        return rsList.stream()
                .flatMap(Collection::stream)
                .allMatch(str -> str.trim().isEmpty());
    }
}
